
version: "3"

# The docker-compose.yml file defines 8 services of DockerFinder
# The services are divided in three groups:
#    1) analysis: crawler, scanner, rabbitmq
#    2) discovery: webapp, software-server, sotware_db
#    3) storage:: images_server, images_db

services:

###############   ANALYSIS PHASE ####################
  crawler:
    image: diunipisocc/docker-finder:crawler
    #restart: always
    build:
     context: analysis
     dockerfile: ./Dockerfile_crawler
    command: [crawl,'--save-url=/data/crawler/lasturl.txt',
                    '--amqp-url=amqp://guest:guest@rabbitmq:5672',
                    '--images-url=http://images_server:3000/api/images/',
                    '--queue=images',
                    '--force-page=True', # force to generate the url with the "fp" without take the last url
                    #'--si=10000',
                    '--random=False',
                    '--fp=10',
                    '--ps=100',
                    '--policy=stars_first',
                    '--min-stars=3',
                    '--min-pulls=0',
                    #'--only-official',
                    '--only-automated',
                    ]
    volumes:
        - crawler_volume:/data/crawler/
    deploy:
      placement:
        constraints:
            - node.hostname==swarm-manager

  rabbitmq:
    image: rabbitmq:3-management
    hostname: rabbitmq
    restart: on-failure:3
    ports:
      - 8082:15672
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq
    deploy:
      placement:
        constraints:
            - node.hostname==swarm-manager

  scanner:
    image: diunipisocc/docker-finder:scanner
    build:
      context: analysis
      dockerfile: ./Dockerfile_scanner
    command: [run, '--images-url=http://images_server:3000/api/images',
                  '--queue=images',
                  '--key=images.scan',
                  '--software-url=http://software_server:3001/api/software',
                  '--rmi'
                  ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

    deploy:
      mode: replicated
      replicas: 10
      placement:
        constraints:
            - node.hostname != swarm-manager
      restart_policy:
          condition: on-failure

#  checker:
#    image: diunipisocc/docker-finder:checker
#    build:
#      context: analysis
#      dockerfile: ./Dockerfile_checker
#    command: [run, '--interval=30','--path-logging=/data/crawler/log/stats.log','--images-url=http://images_server:3000/api/images', '--queue=images', '--key=images.scan','--amqp-url=amqp://guest:guest@rabbitmq:5672']
#    #command: verify
#    volumes:
#      - /dockerfinder/checker/log:/data/crawler/log

#
# #####################################################
# ###############   DISCOVERY PHASE ####################
# #####################################################
#
  software_server:
    build: discovery/softwareService/software_server
    image: diunipisocc/docker-finder:software_server
    hostname: software_server
    ports:
      - "3001:3001"
    depends_on:
      - software_db
    deploy:
      placement:
        constraints:
          - node.hostname==swarm-manager

  software_db:
    image: mongo:3
    hostname: software_db
    volumes:
      - software_db_volume:/data/db  # /data/db is the deafult directory where mogno stores the databases.
    deploy:
       placement:
          constraints:
             - node.hostname == swarm-manager

  webapp:
     build: discovery/webapp/
     image: diunipisocc/docker-finder:webapp
     restart: on-failure:3
     ports:
       - 80:80
     volumes:
       - ./discovery/webapp:/code
     deploy:
        placement:
            constraints:
              - node.hostname == swarm-manager


  # #####################################################
  # ###############   STORAGE PHASE ####################
  # #####################################################
  images_server:
      build: storage/images_server
      image: diunipisocc/docker-finder:images_server
      hostname: images_server
      restart: on-failure:3
      ports:
        - "3000:3000"
      depends_on:
        - images_db
      deploy:
         placement:
            constraints:
               - node.hostname == swarm-manager

  images_db:
      image: mongo:3
      restart: on-failure:3
      hostname: images_db
      volumes:
        - images_db_volume:/data/db
      deploy:
         placement:
            constraints:
               - node.hostname == swarm-manager

volumes:
  crawler_volume:
  rabbitmq_volume:
  images_db_volume:
  software_db_volume:


#####################################################
###############   MANAGEMENT PHASE ####################
#####################################################
##
#  monitor:
#    #container_name: monitor
#    build: management
#    ports:
#      - "3002:3002"
